data nat : Type =
  zero : nat
| suc : nat -> nat;

data tm : Type =
  var : nat -> tm
| lam : tm -> tm
| app : tm -> tm -> tm
| true : tm
| false : tm;

data slist : Type -> Type =
  nil : (A : Type) -> slist A
| snoc : (A : Type) -> slist A -> A -> slist A;

data val : Type =
  vlam : tm -> slist val -> val
| vtrue : val
| vfalse : val;

data tp : Type =
  bool : tp
| arr : tp -> tp -> tp;

data False : Type = ;

data Unit : Type =
 unit : Unit;

data EqTp : tp -> tp -> Type =
 refl : (T : tp) -> EqTp T T;

lookupT : slist tp -> nat -> tp -> Type =
> (nil A) zero T         -> False
> (snoc A G S) zero T    -> EqTp S T
> (snoc A G S) (suc n) T -> lookupT G n T
;

data EqVal : val -> val -> Type =
 vrefl : (v : val) -> EqVal v v;

lookupV : slist val -> nat -> val -> Type =
> (nil A) zero v           -> False
> (snoc A rho v) zero u    -> EqVal u v
> (snoc A rho v) (suc n) u -> lookupV rho n u;

data eval : tm -> slist val -> val -> Type =
  evalTrue  : (rho : slist val) -> eval true rho vtrue
| evalFalse : (rho : slist val) -> eval false rho vfalse
| evalApp : (t : tm) -> (t1 : tm) -> (s : tm) -> (u : val) -> (v : val) 
  -> (rho : slist val) -> (rho1 : slist val)
  -> eval t rho (vlam t1 rho1) -> eval s rho v -> eval t1 (snoc val rho1 v) u
  -> eval (app t s) rho u
| evalLam : (t : tm) -> (rho : slist val) -> eval (lam t) rho (vlam t rho)
| evalVar : (x : nat) -> (rho : slist val) -> (v : val) -> lookupV rho x v -> eval (var x) rho v
;

data isBool : val -> Type =
  trueIsBool : isBool vtrue
| falseIsBool : isBool vfalse;

data appP : (P : val -> Type) -> val -> val -> Type =
 exAp : (P : val -> Type) -> (t : tm) -> (rho : slist val) -> (u : val) -> (w : val) ->
        eval t (snoc val rho u) w -> P w -> appP P (vlam t rho) u;

interp : tp -> val -> Type =
> bool v      -> isBool v
> (arr T S) v -> (u : val) -> interp T u -> appP (interp S) v u
;

data good : tm -> slist val -> tp -> Type =
 isGood : (t : tm) -> (rho : slist val) -> (v : val) -> (T : tp)
          -> eval t rho v -> interp T v -> good t rho T;


interps : slist tp -> slist val -> Type =
> (nil A) (nil B)             -> Unit
> (snoc A G T) (snoc B rho v) -> interp T v
> G            rho            -> False;

data oft : slist tp -> tm -> tp -> Type =
  ovar : (G : slist tp) -> (x : nat) -> (T : tp) -> lookupT G x T -> oft G (var x) T
| olam : (G : slist tp) -> (T : tp) -> (S : tp) -> (t : tm) -> oft (snoc tp G T) t S -> oft G (lam t) (arr T S)
| oapp : (G : slist tp) -> (T : tp) -> (S : tp) -> (t : tm) -> (s : tm)
          -> oft G t (arr T S) -> oft G s T -> oft G (app t s) S
| otrue : (G : slist tp) -> oft G true bool
| ofalse : (G : slist tp) -> oft G false bool
;

ilookup : (G : slist tp) -> (T : tp) -> (x : nat) -> (rho : slist val) -> lookupT G x T -> interps G rho -> good (var x) rho T =
> (snoc A G T) S zero (snoc A' rho v) (refl T') ev -> isGood (var zero) (snoc val rho v) v T (evalVar zero (snoc val rho v) v (vrefl v)) ev
;

thm : (G : slist tp) -> (T : tp) -> (t : tm) -> (rho : slist val) -> oft G t T -> interps G rho -> good t rho T =
;