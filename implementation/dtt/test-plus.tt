data Nat : Type =
  zero : Nat
| suc : Nat -> Nat;

plus : Nat -> Nat -> Nat =
> zero n -> n
> (suc m) n -> suc (plus m n);

data Eq : Nat -> Nat -> Type = 
 refl : (n : Nat) -> Eq n n;

congs : (n : Nat) -> (m : Nat) -> Eq n m -> Eq (suc n) (suc m) =
> n m (refl k) -> refl (suc k)
;

pf : (n : Nat) -> Eq (plus n zero) n =
> zero -> refl zero
> (suc n) -> congs (plus n zero) n (pf n)
;
