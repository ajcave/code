Summary
The authors 

Significance and Originality
This is an exceedingly difficult problem to tackle well, and I commend the authors for having the ambition to take it on. List limitations: only lets me fill in terms; no extra function parameters or simultaneous extensions, often these kinds of changes cause cascades (okay dependencies can be handled backwards maybe, but mutual dependency is a real concern). If the authors anticipate that these will not be concerns, I would like to see justification why.

The restrictions are obvious and severe. The examples they give are toy examples. Considering toy examples are trivial to extend manually, the primary benefit of tools such as these is in large developments. I need to see evidence that this tool is applicable and useful in larger developments before I'm convinced. I expect that many of these restrictions will have to be relaxed.


I am not convinced of the tool's utility and applicability. I consider it limited in application until proven otherwise. It is an original adaptation of techniques from Aspect(?) stuff to the theorem proving setting.
Insufficiently convincing about its significance.
What does this offer beyond the typechecker which points out these errors for you?
e.g. "Definition invalid := exp_rec"...
Quality of Presentation



The paper has many grammatical errors (some listed below) and desperately requires more careful proof reading.

OAAO might be interesting to the authors?

- Difficult problem. (Semantics preserving transformations are easier)
- Seems limited in applicability: Many such changes can drastically alter proof and program structure. Maybe there is still a niche for this tool?
Suitability?
- Paper should make an effort to justify that this is a reasonable problem. It's stated, but not explained
(Identify good things in paper. It's not to comfort the authors, it's so they know what to keep).
Can't this drastically change the structure of proof terms? e.g. what if we have to change the format from a destruct to an inversion?
More advanced example? Dependent types?
- Limitation to proof terms? Eh, I'm okay with it.. Suggest Agda
- Prop hierarchy is not standard terminology.. careful
